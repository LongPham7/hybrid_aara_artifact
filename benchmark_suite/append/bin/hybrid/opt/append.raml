
let incur_cost (hd : int) =
  let modulo = 5 in
  if (hd mod 100) = 0 then Raml.tick 1.0 
  else (if (hd mod modulo) = 1 then Raml.tick 0.85 
        else (if (hd mod modulo) = 2 then Raml.tick 0.65 else Raml.tick 0.5))

let step_function (x : int) (xs : int list) (ys : int list) =
  let _ = incur_cost x in (xs, ys)

let rec append (xs : int list) (ys : int list) =
  match xs with
  | [] -> ys
  | hd :: tl ->
    let rec_xs, rec_ys = Raml.stat (step_function hd tl ys) in
    hd :: append rec_xs rec_ys

let rec map list f = match list with [] -> [] | x :: xs -> f x :: map xs f

;;

let input_dataset = [([31; 11; 26; 25], [10; 36; 20; 24]);
([26; 34; 1; 25], [3; 40; 14; 22]);
([5; 32; 22; 11], [40; 20; 32; 28; 13; 18]);
([10; 7; 1; 16], [39; 27; 12; 17; 20; 30]);
([3; 17; 21; 39], [38; 12; 11; 21; 14; 7; 12; 17; 34]);
([30; 26; 22; 32], [35; 36; 30; 36; 5; 9; 26; 15; 17]);
([15; 28; 21; 9], [23; 12; 27; 32; 31; 12; 37; 36; 24; 31; 40; 35; 25]);
([40; 15; 26; 10], [8; 1; 32; 4; 11; 28; 40; 3; 36; 31; 16; 14; 14]);
([40; 4; 12; 39], [30; 5; 16; 32; 12; 26; 5; 17; 8; 29; 23; 23; 27; 38; 18; 24; 32; 39; 36; 20]);
([17; 21; 21; 5], [23; 14; 39; 32; 34; 27; 24; 26; 23; 6; 15; 29; 5; 22; 40; 5; 11; 34; 5; 21]);
([23; 35; 36; 7], [37; 14; 9; 26; 22; 1; 8; 38; 13; 31; 8; 6; 4; 12; 35; 23; 26; 36; 26; 31; 4; 39; 16; 17; 10; 13; 33; 20; 19; 18]);
([8; 26; 18; 33], [16; 18; 5; 3; 11; 33; 38; 7; 25; 2; 40; 20; 35; 24; 33; 16; 1; 38; 32; 39; 29; 29; 30; 31; 31; 22; 32; 21; 10; 38]);
([1; 19; 3; 32; 17; 14], [20; 1; 14; 16]);
([30; 32; 23; 38; 23; 23], [10; 29; 40; 16]);
([3; 13; 23; 5; 29; 21], [3; 38; 5; 15; 36; 28]);
([9; 34; 7; 10; 19; 2], [14; 26; 4; 15; 40; 26]);
([5; 6; 3; 16; 27; 27], [6; 38; 17; 18; 2; 11; 5; 21; 22]);
([30; 31; 9; 39; 35; 40], [13; 40; 18; 30; 35; 31; 3; 36; 33]);
([7; 33; 5; 27; 7; 8], [18; 17; 33; 9; 26; 39; 29; 27; 12; 37; 3; 11; 4]);
([28; 23; 39; 23; 5; 16], [22; 11; 4; 22; 27; 12; 31; 19; 2; 35; 30; 36; 21]);
([31; 4; 4; 10; 23; 35], [3; 32; 17; 25; 19; 28; 24; 1; 38; 10; 35; 39; 25; 34; 33; 15; 39; 24; 12; 4]);
([14; 38; 13; 35; 10; 35], [21; 10; 28; 19; 38; 22; 20; 12; 4; 9; 22; 30; 32; 2; 32; 35; 31; 12; 20; 38]);
([17; 13; 11; 20; 36; 3], [37; 13; 26; 17; 13; 40; 28; 24; 3; 5; 16; 15; 12; 28; 38; 17; 16; 21; 15; 31; 8; 18; 2; 24; 12; 20; 39; 31; 22; 24]);
([40; 30; 30; 38; 2; 3], [20; 23; 23; 4; 8; 12; 29; 31; 1; 16; 21; 39; 9; 15; 11; 12; 14; 19; 35; 22; 16; 23; 29; 34; 4; 20; 2; 1; 24; 29]);
([22; 10; 17; 16; 20; 4; 16; 13; 35], [19; 28; 15; 37]);
([36; 18; 14; 6; 27; 6; 37; 14; 29], [38; 15; 9; 7]);
([39; 32; 2; 8; 22; 29; 4; 6; 14], [1; 37; 9; 9; 10; 40]);
([28; 40; 10; 14; 21; 38; 2; 20; 37], [22; 28; 36; 33; 40; 23]);
([3; 18; 40; 31; 25; 31; 11; 28; 34], [1; 20; 29; 26; 6; 22; 23; 7; 14]);
([6; 19; 17; 28; 10; 4; 30; 30; 31], [9; 20; 21; 5; 31; 31; 4; 1; 25]);
([38; 11; 30; 20; 23; 8; 6; 21; 9], [17; 4; 6; 19; 22; 6; 26; 15; 4; 5; 1; 27; 38]);
([15; 21; 36; 15; 7; 19; 12; 8; 32], [34; 23; 40; 8; 38; 6; 7; 9; 35; 21; 22; 20; 6]);
([21; 22; 22; 9; 37; 3; 30; 31; 28], [26; 31; 10; 11; 4; 13; 29; 17; 22; 17; 24; 19; 16; 32; 28; 8; 1; 11; 33; 38]);
([17; 9; 34; 26; 34; 13; 20; 5; 33], [8; 23; 35; 15; 6; 4; 23; 38; 39; 10; 20; 19; 28; 7; 36; 16; 6; 8; 36; 36]);
([39; 2; 34; 20; 9; 11; 7; 31; 12], [19; 2; 34; 22; 15; 4; 17; 15; 37; 11; 8; 5; 30; 4; 1; 13; 3; 37; 17; 37; 35; 17; 22; 35; 32; 14; 23; 26; 26; 6]);
([39; 3; 19; 38; 4; 11; 36; 34; 24], [7; 22; 8; 12; 24; 4; 7; 29; 1; 24; 14; 8; 16; 9; 34; 14; 1; 32; 5; 32; 12; 1; 37; 3; 24; 14; 34; 26; 30; 13]);
([26; 29; 33; 22; 17; 20; 25; 6; 13; 38; 24; 39; 8], [21; 35; 18; 40]);
([17; 34; 30; 4; 12; 29; 10; 28; 16; 39; 31; 29; 36], [8; 36; 15; 24]);
([29; 2; 26; 19; 40; 31; 34; 18; 4; 8; 40; 20; 26], [17; 14; 15; 28; 40; 37]);
([32; 27; 20; 35; 17; 32; 35; 14; 12; 8; 9; 32; 32], [13; 17; 26; 29; 3; 12]);
([1; 7; 1; 24; 11; 9; 4; 16; 32; 7; 20; 7; 32], [35; 16; 11; 12; 20; 24; 12; 7; 18]);
([39; 37; 37; 15; 22; 24; 11; 36; 22; 8; 12; 15; 24], [10; 20; 7; 13; 23; 4; 25; 16; 23]);
([11; 34; 9; 30; 13; 38; 1; 2; 22; 35; 19; 4; 18], [17; 32; 9; 7; 18; 32; 22; 8; 28; 33; 13; 7; 3]);
([15; 21; 28; 35; 36; 17; 22; 29; 31; 14; 3; 39; 17], [25; 31; 2; 21; 25; 11; 23; 29; 14; 3; 37; 12; 17]);
([27; 13; 28; 27; 36; 40; 15; 21; 37; 30; 14; 12; 30], [35; 37; 31; 5; 31; 5; 32; 2; 14; 15; 12; 1; 30; 19; 12; 33; 18; 18; 8; 5]);
([22; 35; 24; 1; 34; 35; 6; 5; 1; 14; 15; 7; 39], [28; 23; 10; 30; 15; 10; 32; 38; 7; 35; 32; 22; 23; 28; 25; 31; 12; 1; 2; 20]);
([25; 19; 31; 26; 12; 22; 29; 35; 5; 5; 34; 38; 40], [31; 19; 16; 40; 5; 12; 40; 26; 10; 18; 31; 29; 36; 13; 27; 10; 27; 39; 8; 5; 17; 10; 23; 6; 2; 22; 29; 8; 22; 36]);
([26; 25; 11; 24; 21; 6; 36; 7; 34; 25; 12; 40; 4], [16; 25; 28; 9; 7; 23; 28; 25; 36; 26; 14; 26; 35; 38; 39; 15; 28; 20; 4; 2; 37; 21; 37; 9; 31; 12; 6; 3; 21; 13]);
([33; 19; 27; 25; 23; 15; 23; 21; 9; 32; 22; 2; 32; 26; 7; 30; 3; 28; 31; 37], [35; 18; 29; 28]);
([1; 1; 35; 40; 10; 13; 21; 25; 24; 20; 28; 27; 33; 34; 32; 17; 1; 34; 30; 10], [21; 37; 39; 9]);
([21; 30; 8; 21; 3; 39; 6; 24; 11; 23; 14; 28; 21; 35; 2; 30; 7; 25; 25; 9], [31; 36; 1; 2; 5; 26]);
([19; 11; 14; 23; 4; 18; 8; 17; 21; 21; 40; 12; 8; 36; 13; 3; 31; 30; 22; 32], [27; 13; 2; 38; 8; 24]);
([7; 26; 34; 24; 31; 26; 17; 26; 6; 31; 38; 24; 22; 6; 23; 23; 26; 7; 29; 2], [8; 1; 32; 39; 5; 40; 16; 38; 35]);
([19; 16; 28; 37; 8; 37; 34; 8; 6; 8; 8; 29; 35; 24; 24; 32; 15; 25; 3; 12], [4; 39; 24; 25; 2; 5; 18; 29; 39]);
([10; 33; 36; 10; 39; 38; 38; 36; 9; 3; 18; 3; 9; 40; 7; 1; 22; 2; 38; 11], [16; 21; 1; 20; 33; 37; 32; 19; 20; 7; 21; 9; 38]);
([35; 1; 34; 33; 6; 30; 21; 10; 2; 33; 40; 1; 12; 23; 36; 17; 3; 34; 30; 14], [19; 26; 18; 32; 27; 27; 18; 8; 39; 8; 26; 3; 16]);
([31; 29; 25; 34; 34; 16; 5; 40; 21; 21; 29; 38; 8; 31; 7; 24; 39; 9; 14; 35], [2; 8; 13; 40; 17; 8; 26; 31; 26; 36; 6; 30; 4; 25; 32; 9; 23; 12; 15; 39]);
([34; 21; 39; 8; 32; 33; 21; 6; 7; 18; 2; 27; 32; 26; 23; 1; 31; 37; 3; 30], [9; 29; 21; 4; 36; 6; 29; 5; 26; 1; 7; 12; 39; 33; 7; 36; 6; 35; 9; 21]);
([17; 39; 31; 8; 28; 24; 21; 27; 11; 23; 30; 1; 26; 20; 21; 11; 3; 24; 14; 11], [27; 17; 23; 14; 4; 19; 3; 2; 12; 4; 15; 10; 11; 32; 24; 5; 5; 11; 12; 40; 38; 20; 29; 2; 30; 12; 19; 3; 9; 4]);
([16; 40; 11; 33; 36; 30; 23; 13; 33; 13; 11; 17; 10; 40; 23; 31; 11; 23; 17; 8], [30; 30; 36; 9; 1; 14; 28; 40; 32; 8; 1; 15; 39; 4; 15; 19; 15; 13; 32; 5; 11; 13; 29; 31; 26; 38; 3; 22; 12; 32]);
([36; 2; 17; 13; 40; 7; 39; 23; 12; 12; 23; 9; 5; 21; 30; 37; 29; 23; 18; 34; 11; 36; 1; 8; 2; 3; 28; 40; 7; 31], [16; 29; 2; 30]);
([8; 25; 2; 11; 2; 7; 35; 13; 30; 21; 24; 30; 25; 38; 6; 16; 34; 22; 37; 32; 7; 13; 30; 38; 38; 26; 28; 4; 31; 39], [23; 38; 25; 23]);
([8; 5; 16; 39; 30; 37; 2; 20; 10; 12; 33; 4; 6; 4; 23; 5; 19; 38; 23; 28; 38; 37; 6; 2; 2; 23; 6; 27; 6; 8], [37; 18; 3; 28; 6; 40]);
([15; 4; 5; 24; 23; 36; 38; 3; 3; 3; 29; 17; 14; 24; 34; 32; 6; 10; 4; 15; 6; 30; 7; 22; 24; 24; 9; 27; 34; 36], [26; 4; 32; 8; 36; 14]);
([18; 26; 33; 18; 17; 31; 12; 11; 30; 24; 17; 4; 12; 19; 20; 24; 40; 3; 1; 14; 24; 34; 29; 8; 23; 32; 7; 35; 38; 25], [13; 22; 1; 36; 1; 1; 22; 1; 7]);
([17; 37; 30; 16; 10; 10; 8; 30; 3; 14; 29; 5; 35; 34; 27; 31; 25; 15; 34; 14; 23; 20; 28; 18; 9; 15; 18; 34; 10; 33], [19; 19; 1; 36; 15; 38; 7; 39; 34]);
([5; 23; 15; 9; 21; 16; 34; 34; 7; 1; 40; 27; 3; 10; 37; 26; 1; 34; 17; 10; 12; 15; 34; 13; 10; 40; 33; 34; 9; 37], [9; 2; 29; 1; 5; 40; 20; 14; 11; 6; 26; 22; 26]);
([18; 29; 7; 7; 12; 33; 21; 27; 18; 21; 6; 20; 17; 24; 24; 36; 16; 12; 38; 22; 7; 32; 23; 10; 38; 35; 26; 37; 1; 12], [36; 8; 1; 23; 33; 38; 28; 30; 40; 20; 19; 5; 10]);
([31; 21; 8; 36; 37; 40; 24; 13; 14; 18; 18; 8; 28; 16; 19; 26; 3; 23; 5; 17; 10; 1; 32; 15; 16; 22; 9; 23; 40; 4], [30; 6; 35; 26; 2; 18; 15; 22; 24; 20; 6; 38; 17; 4; 36; 35; 4; 19; 38; 15]);
([23; 37; 9; 10; 21; 16; 39; 6; 2; 32; 26; 11; 11; 34; 24; 39; 12; 37; 23; 32; 7; 39; 10; 40; 36; 3; 31; 31; 5; 16], [20; 3; 40; 31; 34; 11; 35; 3; 1; 12; 23; 26; 26; 11; 30; 11; 14; 24; 22; 35]);
([33; 32; 22; 4; 28; 3; 6; 7; 9; 1; 3; 22; 9; 22; 30; 30; 9; 16; 22; 9; 14; 37; 19; 34; 25; 26; 28; 29; 12; 16], [38; 10; 9; 1; 8; 40; 39; 35; 22; 7; 40; 27; 39; 29; 38; 28; 22; 11; 5; 15; 26; 35; 30; 2; 4; 13; 4; 17; 12; 12]);
([36; 3; 23; 9; 24; 30; 39; 21; 38; 32; 31; 11; 25; 18; 16; 31; 29; 14; 5; 9; 34; 7; 6; 4; 17; 15; 17; 16; 8; 4], [8; 13; 25; 4; 26; 36; 31; 9; 23; 22; 13; 36; 17; 10; 24; 2; 27; 9; 38; 18; 39; 39; 2; 10; 13; 7; 23; 20; 8; 18])]
in map input_dataset (fun (x, y) -> append x y)
