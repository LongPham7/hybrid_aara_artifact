
exception Invalid_input

let incur_cost (hd : int) =
  if (hd mod 10) = 0 then Raml.tick 1.0 else Raml.tick 0.5

let rec linear_traversal (xs : int list) =
  match xs with
  | [] -> []
  | hd :: tl ->
      let _ = incur_cost hd in
      hd :: linear_traversal tl

let rec is_even (xs : int list) =
  match xs with [] -> true | [ x ] -> false | x1 :: x2 :: tl -> is_even tl

let tail (xs : int list) =
  match xs with [] -> raise Invalid_input | hd :: tl -> tl

let rec split (xs : int list) =
  match xs with
  | [] -> []
  | [ x ] -> raise Invalid_input
  | x1 :: x2 :: tl -> x1 :: split tl

let rec even_split_odd_tail (xs : int list) : int list =
  let xs_traversed = linear_traversal xs in
  match xs_traversed with
  | [] -> []
  | hd :: tl ->
      let xs_is_even = is_even xs_traversed in
      if xs_is_even then
        let split_result = split xs_traversed in
        even_split_odd_tail split_result
      else
        let tail_result = tail xs_traversed in
        even_split_odd_tail tail_result

let even_split_odd_tail2 (xs : int list) : int list =
  Raml.stat (even_split_odd_tail xs)

let rec map list f = match list with [] -> [] | x :: xs -> f x :: map xs f

;;

let input_dataset = [[6; 4; 5; 6; 2; 6; 7; 2];
[5; 4; 1; 5; 7; 2; 6; 1];
[1; 8; 3; 3; 3; 3; 4; 6];
[8; 2; 2; 1; 3; 7; 8; 2];
[7; 1; 7; 8; 6; 1; 1; 4];
[7; 9; 1; 11; 1; 10; 12; 5; 3; 2; 12; 12];
[1; 8; 10; 12; 7; 9; 2; 11; 5; 4; 1; 12];
[8; 9; 2; 12; 12; 2; 11; 12; 5; 6; 4; 6];
[2; 5; 7; 11; 11; 4; 6; 11; 10; 4; 1; 7];
[1; 12; 5; 1; 4; 6; 8; 3; 12; 11; 6; 11];
[17; 7; 15; 7; 2; 9; 2; 1; 16; 15; 11; 12; 2; 1; 2; 14; 5; 1];
[17; 5; 10; 5; 15; 9; 5; 14; 7; 3; 7; 13; 7; 4; 4; 18; 7; 13];
[9; 14; 18; 12; 7; 5; 7; 14; 8; 17; 17; 18; 8; 10; 4; 12; 4; 1];
[10; 18; 14; 14; 13; 17; 7; 16; 6; 9; 9; 1; 14; 2; 6; 15; 3; 6];
[3; 16; 12; 11; 5; 7; 18; 10; 3; 10; 9; 13; 12; 18; 12; 18; 12; 15];
[20; 27; 6; 18; 24; 3; 23; 2; 17; 7; 7; 19; 24; 11; 25; 7; 16; 10; 7; 3; 7; 18; 16; 18; 5; 7; 26];
[9; 16; 18; 27; 15; 17; 23; 14; 23; 20; 26; 14; 18; 19; 14; 18; 18; 19; 20; 3; 17; 26; 5; 18; 4; 11; 18];
[15; 25; 6; 10; 9; 3; 8; 21; 10; 22; 1; 2; 11; 4; 22; 17; 3; 2; 27; 12; 13; 27; 8; 24; 17; 20; 12];
[26; 3; 1; 13; 21; 27; 1; 13; 1; 22; 9; 13; 25; 26; 8; 17; 2; 13; 8; 27; 5; 19; 7; 14; 5; 23; 4];
[26; 27; 10; 14; 27; 2; 4; 16; 8; 7; 17; 3; 5; 18; 1; 3; 25; 12; 1; 20; 11; 18; 25; 26; 13; 16; 8];
[38; 5; 40; 34; 18; 15; 28; 38; 9; 27; 6; 5; 30; 28; 39; 18; 39; 16; 18; 16; 3; 23; 17; 34; 26; 27; 1; 38; 37; 22; 35; 36; 36; 40; 10; 21; 28; 19; 7; 37];
[24; 19; 36; 10; 25; 31; 38; 17; 10; 27; 40; 26; 1; 38; 12; 23; 14; 3; 23; 25; 22; 16; 27; 18; 33; 14; 35; 2; 21; 26; 35; 5; 37; 12; 10; 32; 37; 11; 33; 20];
[24; 40; 30; 37; 23; 33; 28; 21; 35; 10; 39; 13; 20; 24; 1; 2; 40; 21; 31; 4; 3; 40; 21; 1; 3; 22; 5; 28; 37; 15; 9; 23; 20; 4; 18; 5; 10; 13; 10; 31];
[13; 31; 37; 24; 18; 29; 7; 32; 12; 14; 9; 24; 26; 8; 40; 25; 1; 4; 17; 32; 28; 5; 33; 38; 8; 30; 15; 20; 13; 13; 11; 17; 27; 16; 38; 19; 3; 11; 38; 36];
[35; 8; 23; 18; 15; 4; 29; 3; 25; 1; 22; 29; 21; 18; 26; 27; 6; 4; 13; 17; 34; 39; 14; 8; 36; 39; 25; 38; 18; 10; 10; 10; 21; 1; 23; 19; 25; 18; 4; 26];
[10; 58; 34; 50; 21; 40; 17; 16; 49; 34; 15; 40; 52; 47; 17; 42; 53; 12; 24; 11; 48; 31; 40; 18; 47; 43; 37; 8; 40; 24; 27; 2; 31; 56; 1; 25; 58; 20; 13; 52; 52; 39; 25; 37; 18; 15; 52; 9; 45; 32; 23; 43; 16; 22; 43; 11; 23; 16; 27; 59];
[57; 49; 58; 27; 45; 22; 52; 7; 31; 2; 50; 55; 16; 31; 47; 59; 45; 45; 56; 35; 57; 20; 30; 22; 52; 15; 46; 52; 27; 5; 44; 43; 41; 33; 53; 37; 49; 41; 51; 31; 9; 37; 51; 26; 13; 14; 8; 54; 25; 36; 38; 29; 53; 32; 56; 44; 47; 27; 57; 51];
[18; 7; 34; 2; 44; 14; 39; 5; 55; 55; 37; 3; 23; 36; 8; 35; 54; 13; 30; 31; 40; 49; 24; 45; 33; 36; 55; 21; 50; 47; 5; 24; 23; 47; 35; 55; 58; 8; 55; 43; 2; 48; 22; 17; 4; 33; 17; 5; 8; 59; 58; 22; 36; 41; 55; 5; 17; 46; 1; 58];
[28; 7; 1; 59; 59; 22; 17; 55; 13; 18; 27; 27; 26; 38; 45; 1; 11; 48; 58; 58; 32; 7; 29; 38; 10; 60; 31; 23; 8; 18; 59; 13; 49; 29; 55; 31; 18; 43; 18; 8; 58; 22; 50; 52; 40; 36; 26; 2; 4; 33; 19; 49; 55; 47; 6; 41; 32; 31; 16; 29];
[20; 11; 56; 18; 51; 49; 47; 39; 45; 46; 11; 1; 52; 1; 18; 40; 21; 37; 39; 16; 60; 10; 20; 6; 57; 22; 24; 4; 29; 39; 23; 16; 1; 54; 12; 25; 37; 59; 27; 42; 19; 58; 18; 55; 30; 14; 26; 39; 35; 35; 8; 60; 55; 6; 45; 40; 31; 41; 29; 37];
[13; 70; 80; 66; 25; 7; 82; 90; 50; 22; 4; 5; 71; 24; 17; 36; 78; 23; 67; 67; 52; 62; 33; 82; 88; 20; 83; 42; 14; 1; 66; 63; 7; 66; 4; 70; 44; 28; 54; 22; 11; 86; 29; 86; 24; 78; 16; 89; 58; 52; 82; 22; 78; 57; 16; 68; 45; 52; 43; 45; 57; 59; 70; 90; 70; 58; 8; 65; 23; 65; 10; 29; 76; 87; 72; 52; 3; 40; 60; 58; 30; 38; 76; 68; 40; 45; 83; 44; 45; 48];
[29; 49; 29; 7; 21; 32; 53; 37; 15; 66; 46; 25; 15; 18; 73; 16; 39; 84; 2; 31; 50; 25; 3; 65; 22; 23; 13; 83; 41; 34; 75; 6; 82; 83; 84; 26; 79; 6; 50; 64; 66; 23; 47; 41; 8; 16; 65; 20; 15; 34; 15; 35; 23; 1; 49; 49; 62; 67; 58; 69; 36; 7; 90; 84; 59; 6; 82; 48; 59; 47; 71; 8; 18; 76; 50; 39; 70; 27; 78; 39; 64; 77; 68; 24; 5; 72; 14; 25; 53; 11];
[34; 74; 2; 71; 14; 50; 61; 8; 84; 75; 82; 71; 13; 77; 41; 20; 34; 81; 4; 13; 54; 65; 81; 26; 54; 42; 59; 57; 1; 46; 24; 30; 43; 13; 39; 55; 10; 5; 9; 15; 22; 33; 13; 36; 10; 69; 74; 17; 77; 51; 49; 67; 63; 49; 71; 54; 50; 67; 29; 87; 9; 70; 63; 34; 77; 90; 65; 24; 79; 52; 73; 1; 5; 52; 61; 6; 49; 22; 88; 51; 42; 9; 27; 54; 29; 48; 13; 10; 65; 53];
[41; 17; 76; 40; 12; 56; 33; 11; 18; 43; 11; 78; 28; 44; 56; 24; 84; 56; 13; 44; 65; 19; 5; 67; 5; 46; 13; 10; 35; 12; 64; 74; 63; 77; 59; 46; 45; 73; 59; 61; 48; 72; 17; 8; 54; 73; 65; 10; 34; 48; 35; 48; 32; 76; 63; 7; 55; 69; 29; 82; 6; 89; 89; 47; 18; 62; 76; 84; 47; 21; 51; 67; 9; 2; 60; 52; 44; 47; 83; 10; 57; 1; 1; 69; 13; 13; 86; 14; 17; 67];
[84; 35; 35; 76; 42; 43; 43; 75; 52; 43; 69; 7; 1; 82; 33; 35; 60; 76; 40; 87; 30; 28; 10; 39; 78; 81; 46; 20; 75; 62; 56; 29; 55; 18; 57; 65; 27; 44; 58; 69; 38; 41; 14; 72; 54; 71; 88; 6; 82; 40; 21; 72; 79; 60; 20; 83; 37; 56; 56; 7; 33; 14; 71; 9; 5; 17; 13; 86; 81; 39; 43; 53; 15; 11; 43; 31; 82; 8; 74; 86; 5; 40; 62; 14; 58; 52; 18; 39; 36; 18]]
in map input_dataset even_split_odd_tail2
